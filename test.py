# 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
# pip install streamlit pandas plotly supabase openai openpyxl
# ----------------------
import subprocess
import sys
import io # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏
import os
import json
import asyncio
from datetime import datetime

import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from openai import AsyncOpenAI
from supabase import create_client, Client


# ----------------------
# 2. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ----------------------
DEESEEK_API_URL = "https://api.studio.nebius.ai/v1/"


# ----------------------
# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------

@st.cache_data
def load_data(file_path: str) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞."""
    df = pd.read_excel(file_path)
    df.columns = [str(col).strip().lower() if isinstance(col, str) else col for col in df.columns]
    if 'data' in df.columns:
        df['data'] = pd.to_datetime(df['data'], errors='coerce')
    return df

def to_excel(df: pd.DataFrame) -> bytes:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ –±–∞–π—Ç—ã Excel-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
    return output.getvalue()

def run_async(coro):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Streamlit."""
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    return loop.run_until_complete(coro)

def convert_sentiment_to_10_point(score: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [-1, 1] –≤ [1, 10]."""
    if not isinstance(score, (int, float)):
        return 5.5
    return (score + 1) * 4.5 + 1


# ----------------------
# 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (Supabase –∏ LLM)
# ----------------------

@st.cache_resource
def init_supabase_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase."""
    try:
        supabase_url = st.secrets["SUPABASE_URL"]
        supabase_key = st.secrets["SUPABASE_KEY"]
        return create_client(supabase_url, supabase_key)
    except KeyError as e:
        st.error(f"–û—à–∏–±–∫–∞: –∫–ª—é—á '{e.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return None

@st.cache_data(ttl=300)
def get_report_list_from_supabase(_supabase: Client) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ Supabase."""
    try:
        response = _supabase.table('reports').select('report_name', count='exact').execute()
        return sorted(list(set(item['report_name'] for item in response.data)), reverse=True) if response.data else []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ Supabase: {e}")
        return []

@st.cache_data
def load_report_from_supabase(_supabase: Client, report_name: str) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ Supabase –≤ DataFrame."""
    try:
        response = _supabase.table('reports').select('*').eq('report_name', report_name).execute()
        df = pd.DataFrame(response.data)
        if 'data' in df.columns:
            df['data'] = pd.to_datetime(df['data'], errors='coerce')
        if not df.empty:
            df = df.drop(columns=['id', 'created_at', 'report_name'], errors='ignore')
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ '{report_name}': {e}")
        return pd.DataFrame()

async def analyze_reflection_with_deepseek(client: AsyncOpenAI, text: str) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    error_result = {"sentiment_score": 0.0, "learning_feedback": "N/A", "teamwork_feedback": "N/A", "organization_feedback": "N/A", "learning_sentiment_score": 0.0, "teamwork_sentiment_score": 0.0, "organization_sentiment_score": 0.0}
    if not text or not isinstance(text, str) or not text.strip(): return error_result
    prompt = ("–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)") # –û—Å—Ç–∞–≤–∏–ª —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    try:
        response = await client.chat.completions.create(model="deepseek-ai/DeepSeek-V3", messages=[{"role": "user", "content": prompt}], temperature=0.2, response_format={"type": "json_object"})
        result = json.loads(response.choices[0].message.content)
        for key, value in error_result.items(): result.setdefault(key, value)
        return result
    except Exception as e:
        print(f"Error processing text: '{text[:50]}...'. Error: {e}")
        return error_result

async def generate_nomination_with_llm(client: AsyncOpenAI, reflections: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à—É—Ç–æ—á–Ω—É—é –Ω–æ–º–∏–Ω–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    if not reflections or not reflections.strip():
        reflections = "–£—á–∞—Å—Ç–Ω–∏–∫ –±—ã–ª —Å–ª–∏—à–∫–æ–º –ø–æ–≥—Ä—É–∂–µ–Ω –≤ –≤–µ–ª–∏–∫–∏–µ –Ω–∞—É—á–Ω—ã–µ –¥–µ–ª–∞ –∏ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏–π."
    prompt = ( "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ –ª–∞–≥–µ—Ä—è... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)" ) # –û—Å—Ç–∞–≤–∏–ª —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ
    try:
        response = await client.chat.completions.create(model="deepseek-ai/DeepSeek-V3", messages=[{"role": "user", "content": prompt}], temperature=0.7, max_tokens=50)
        return response.choices[0].message.content.strip().strip('"')
    except Exception as e:
        print(f"Error generating nomination: {e}")
        return "–ú–∞—Å—Ç–µ—Ä –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏"

async def generate_character_description_with_llm(client: AsyncOpenAI, name: str, reflections: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à—É—Ç–æ—á–Ω—É—é, –Ω–æ –¥–æ–±—Ä—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    is_empty_reflection = not reflections or not reflections.strip()
    if is_empty_reflection:
        reflections = "–†–µ—Ñ–ª–µ–∫—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç..." # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ "–ø—É—Å—Ç–æ–≥–æ" —Å–ª—É—á–∞—è
    prompt = ( f"–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –∏ –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏–º–µ–Ω–µ–º {name})" ) # –û—Å—Ç–∞–≤–∏–ª —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ
    try:
        response = await client.chat.completions.create(model="deepseek-ai/DeepSeek-V3", messages=[{"role": "user", "content": prompt}], temperature=0.8, max_tokens=400)
        return response.choices[0].message.content
    except Exception as e:
        print(f"Error generating description: {e}")
        return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è {name} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è. –ù–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ {name} ‚Äî –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∏ –∂–µ–ª–∞–µ–º –µ–º—É –æ–≥—Ä–æ–º–Ω—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –≤–æ –≤—Å–µ—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö!"


# ----------------------
# 5. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ –¥–∞—à–±–æ—Ä–¥ –Ω–∞ Streamlit
# ----------------------
def main():
    st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π")
    st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π —É—á–∞—â–∏—Ö—Å—è")

    with st.expander("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ: —á—Ç–æ —ç—Ç–æ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", expanded=False):
        st.markdown(""" ... (–≤–∞—à —Ç–µ–∫—Å—Ç –æ –ø—Ä–æ–µ–∫—Ç–µ) ... """)

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
    supabase = init_supabase_client()
    if not supabase:
        st.stop()
    try:
        api_key = st.secrets["DEEPSEEK_API_KEY"]
        client = AsyncOpenAI(base_url=DEESEEK_API_URL, api_key=api_key)
    except KeyError:
        st.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á `DEEPSEEK_API_KEY` –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit.")
        st.stop()

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    st.sidebar.header("üóÇÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
    report_files = get_report_list_from_supabase(supabase)
    data_source_options = ["–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"] + report_files
    selected_source = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:", data_source_options)

    df = None
    if selected_source != "–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑":
        df = load_report_from_supabase(supabase, selected_source)
        st.session_state['current_file_name'] = selected_source
    else:
        uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª:", type="xlsx")
        if uploaded_file:
            st.session_state['current_file_name'] = uploaded_file.name
            df = load_data(uploaded_file)
            df['text'] = df['text'].astype(str).fillna('')

    if df is None:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        st.stop()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    session_key = f"df_processed_{st.session_state.get('current_file_name', 'default')}"
    if session_key not in st.session_state:
        if selected_source == "–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑":
            with st.spinner('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.'):
                tasks = [analyze_reflection_with_deepseek(client, text) for text in df['text']]
                results = run_async(asyncio.gather(*tasks))
                results_df = pd.DataFrame(results)
                df = pd.concat([df.reset_index(drop=True), results_df.reset_index(drop=True)], axis=1)

        for col in ['sentiment_score', 'learning_sentiment_score', 'teamwork_sentiment_score', 'organization_sentiment_score']:
            if col in df.columns:
                df[col.replace('_score', '_10_point')] = df[col].apply(convert_sentiment_to_10_point)
        st.session_state[session_key] = df
    
    df = st.session_state[session_key]

    # --- –§–∏–ª—å—Ç—Ä—ã ---
    st.sidebar.header("üìä –§–∏–ª—å—Ç—Ä—ã")
    filtered_df = df.copy()
    if 'data' in filtered_df.columns and not filtered_df['data'].dropna().empty:
        min_date, max_date = filtered_df['data'].min().date(), filtered_df['data'].max().date()
        if min_date != max_date:
            start_date, end_date = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:", min_date, max_date, (min_date, max_date))
            mask = (filtered_df['data'].dt.date >= start_date) & (filtered_df['data'].dt.date <= end_date)
            filtered_df = filtered_df.loc[mask]

    if filtered_df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        st.stop()

    # --- –ë–õ–û–ö –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ---
    st.sidebar.markdown("---")
    st.sidebar.header("üéì –í—ã–ø—É—Å–∫–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö"):
        unique_students = filtered_df['username'].unique()
        
        async def generate_all_creative_content():
            tasks = []
            for student_name in unique_students:
                student_reflections = " ".join(filtered_df[filtered_df['username'] == student_name]['text'].dropna().astype(str))
                tasks.append(generate_nomination_with_llm(client, student_reflections))
                tasks.append(generate_character_description_with_llm(client, student_name, student_reflections))
            
            all_results = await asyncio.gather(*tasks, return_exceptions=True)
            
            final_data = []
            for i, student_name in enumerate(unique_students):
                nomination, description = all_results[i*2], all_results[i*2 + 1]
                final_data.append({
                    "–£—á–µ–Ω–∏–∫": student_name,
                    "–ù–æ–º–∏–Ω–∞—Ü–∏—è": "–û—à–∏–±–∫–∞" if isinstance(nomination, Exception) else nomination,
                    "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": f"–û—à–∏–±–∫–∞: {description}" if isinstance(description, Exception) else description,
                })
            return pd.DataFrame(final_data)

        with st.sidebar.spinner(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {len(unique_students)} —É—á–µ–Ω–∏–∫–æ–≤..."):
            creative_df = run_async(generate_all_creative_content())
            if not creative_df.empty:
                st.session_state['downloadable_excel'] = to_excel(creative_df)
                st.session_state['excel_filename'] = f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
                st.sidebar.success("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å.")
            else:
                st.sidebar.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")

    if 'downloadable_excel' in st.session_state:
        st.sidebar.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª Excel",
            data=st.session_state['downloadable_excel'],
            file_name=st.session_state['excel_filename'],
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

    # --- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ –î–ê–®–ë–û–†–î–ê ---
    st.header("–û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑")
    # ... (–≤–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–±—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã)

    st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —É—á–∞—â–∏–º—Å—è")
    student_list = sorted(filtered_df['username'].unique())
    if student_list:
        student = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", student_list)
        if student:
            student_df = filtered_df[filtered_df['username'] == student].sort_values('data')
            # ... (–≤–∞—à –∫–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞)

            # --- –ë–õ–û–ö –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò ---
            st.markdown("---")
            st.subheader(f"‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è {student}")
            full_reflection_text = " ".join(student_df['text'].dropna().astype(str))
            if st.button(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è {student}"):
                with st.spinner("–ú–∞–≥–∏—è —Ç–≤–æ—Ä–∏—Ç—Å—è..."):
                    async def get_content():
                        return await asyncio.gather(
                            generate_nomination_with_llm(client, full_reflection_text),
                            generate_character_description_with_llm(client, student, full_reflection_text)
                        )
                    nomination, description = run_async(get_content())
                    st.session_state[f'nomination_{student}'] = nomination
                    st.session_state[f'description_{student}'] = description

            if f'nomination_{student}' in st.session_state:
                st.success(f"**–ù–æ–º–∏–Ω–∞—Ü–∏—è:** {st.session_state[f'nomination_{student}']}")
            if f'description_{student}' in st.session_state:
                st.markdown(st.session_state[f'description_{student}'])
            
            # --- –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ ---
            st.markdown("---")
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π")
            # ... (–≤–∞—à –∫–æ–¥ –¥–ª—è expander –∏ st.dataframe)

    # ... (–≤–∞—à –∫–æ–¥ –¥–ª—è –∑–æ–Ω—ã —Ä–∏—Å–∫–∞ –∏ —Ç.–¥.)


# ----------------------
# 6. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ----------------------
if __name__ == "__main__":
    main()
