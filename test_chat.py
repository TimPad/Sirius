import subprocess
import sys

import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import json
from openai import AsyncOpenAI
import asyncio
import numpy as np
import os
from supabase import create_client, Client

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è DeepSeek API
DEESEEK_API_URL = "https://api.studio.nebius.ai/v1/"

# ----------------------
# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
# ----------------------
@st.cache_data
def load_data(file_path: str) -> pd.DataFrame:
    df = pd.read_excel(file_path)
    df.columns = [str(col).strip().lower() if isinstance(col, str) else col for col in df.columns]
    if 'data' in df.columns:
        df['data'] = pd.to_datetime(df['data'], errors='coerce')
    return df

@st.cache_resource
def init_supabase_client():
    try:
        supabase_url = st.secrets["SUPABASE_URL"]
        supabase_key = st.secrets["SUPABASE_KEY"]
        return create_client(supabase_url, supabase_key)
    except KeyError as e:
        st.error(f"–û—à–∏–±–∫–∞: –∫–ª—é—á '{e.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit.")
        return None

# ----------------------
# –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è DeepSeek –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏—è
# ----------------------
async def analyze_reflection_with_deepseek(client: AsyncOpenAI, text: str) -> dict:
    error_result = {
        "sentiment_score": 0.0,
        "learning_feedback": "N/A",
        "teamwork_feedback": "N/A",
        "organization_feedback": "N/A",
        "learning_sentiment_score": 0.0,
        "teamwork_sentiment_score": 0.0,
        "organization_sentiment_score": 0.0,
    }
    if not text or not isinstance(text, str) or not text.strip():
        return error_result
    prompt = (
        "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —à–∫–æ–ª—å–Ω–∏–∫–∞. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å JSON-–æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏:\n"
        "1. 'sentiment_score': –æ–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, —á–∏—Å–ª–æ –æ—Ç -1.0 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ 1.0 (–ø–æ–∑–∏—Ç–∏–≤).\n"
        "2. 'learning_feedback': –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ–± –æ—Ü–µ–Ω–∫–µ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.\n"
        "3. 'teamwork_feedback': –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ–± –æ—Ü–µ–Ω–∫–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ.\n"
        "4. 'organization_feedback': –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ–± –æ—Ü–µ–Ω–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—É–≥–æ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.\n"
        "5. 'learning_sentiment_score': —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û —á–∞—Å—Ç–∏ –ø—Ä–æ —É—á—ë–±—É (–æ—Ç -1.0 –¥–æ 1.0).\n"
        "6. 'teamwork_sentiment_score': —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û —á–∞—Å—Ç–∏ –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É (–æ—Ç -1.0 –¥–æ 1.0).\n"
        "7. 'organization_sentiment_score': —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¢–û–õ–¨–ö–û —á–∞—Å—Ç–∏ –ø—Ä–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (–æ—Ç -1.0 –¥–æ 1.0).\n\n"
        f"–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: \"{text}\""
    )
    try:
        response = await client.chat.completions.create(
            model="deepseek-ai/DeepSeek-V3",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
            response_format={"type": "json_object"}
        )
        content = response.choices[0].message.content
        result = json.loads(content)
        for key, val in error_result.items():
            if key not in result:
                result[key] = val
        return result
    except Exception as e:
        print(f"Error processing text: '{text[:50]}...'. Error: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DeepSeek API: {e}")
        return error_result

# ----------------------
# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
# ----------------------
def convert_sentiment_to_10_point(score: float) -> float:
    if not isinstance(score, (int, float)):
        return 5.5
    return (score + 1) * 4.5 + 1

# ----------------------
# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–π –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
# ----------------------
@st.cache_data
async def generate_nominations(df: pd.DataFrame, client: AsyncOpenAI) -> pd.DataFrame:
    grouped = df.groupby('username')['text'].apply(lambda texts: ' '.join(texts)).reset_index()
    async def gen(item):
        username, text = item
        prompt = (
            f"–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —Å –º–æ—Ä—Å–∫–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Å–º–µ–Ω—ã. "
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π: \"{text}\", –ø—Ä–∏—Å–≤–æ–π —à—É—Ç–æ—á–Ω—É—é –Ω–æ–º–∏–Ω–∞—Ü–∏—é –≤ –º–æ—Ä—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
            f"–ø–æ—á–µ–º—É –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç: {{'nomination': str, 'justification': str}}."
        )
        try:
            resp = await client.chat.completions.create(
                model="deepseek-ai/DeepSeek-V3",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                response_format={"type": "json_object"}
            )
            data = json.loads(resp.choices[0].message.content)
            return {'username': username,
                    'nomination': data.get('nomination', '–ú–æ—Ä—Å–∫–æ–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'),
                    'justification': data.get('justification', '–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ!')}
        except:
            return {'username': username,
                    'nomination': '–ú–æ—Ä—Å–∫–æ–π –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                    'justification': '–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ!'}
    items = list(zip(grouped['username'], grouped['text']))
    results = await asyncio.gather(*[gen(item) for item in items])
    return pd.DataFrame(results)

@st.cache_data
async def generate_friendly_reflections(df: pd.DataFrame, client: AsyncOpenAI) -> pd.DataFrame:
    grouped = df.groupby('username')['text'].apply(lambda texts: ' '.join(texts)).reset_index()
    async def gen(item):
        username, text = item
        prompt = (
            f"–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å—É–º–º–∏—Ä—É—é—â–∏–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ —Å –º–æ—Ä—Å–∫–æ–π –Ω–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ç–Ω–æ–π —Å–º–µ–Ω—ã. "
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π: \"{text}\", —Å–æ–∑–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ, —à—É—Ç–æ—á–Ω–æ–µ —Ä–µ–∑—é–º–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
            f"–í–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç: {{'reflection': str, 'encouragement': str}}."
        )
        try:
            resp = await client.chat.completions.create(
                model="deepseek-ai/DeepSeek-V3",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                response_format={"type": "json_object"}
            )
            data = json.loads(resp.choices[0].message.content)
            return {
                'username': username,
                'reflection': data.get('reflection', '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏!'),
                'encouragement': data.get('encouragement', '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
            }
        except:
            return {
                'username': username,
                'reflection': '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏!',
                'encouragement': '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
            }
    items = list(zip(grouped['username'], grouped['text']))
    results = await asyncio.gather(*[gen(item) for item in items])
    return pd.DataFrame(results)

# ----------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ----------------------

def main():
    st.set_page_config(layout="wide")
    st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π —É—á–∞—â–∏—Ö—Å—è")

    # ... –ø—Ä–µ–¥—ã–¥—É—â–∞—è —á–∞—Å—Ç—å main –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ...
    # –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è filtered_df –∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤:
    st.sidebar.markdown("---")
    st.sidebar.subheader("üéâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–º–∏–Ω–∞—Ü–∏–π
    if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—É—Ç–æ—á–Ω—ã–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏"):
        if 'nominations_df' not in st.session_state:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–∏–Ω–∞—Ü–∏–π..."):
                nomin_df = asyncio.run(generate_nominations(filtered_df, client))
                st.session_state['nominations_df'] = nomin_df
        st.subheader("üèÜ –®—É—Ç–æ—á–Ω—ã–µ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        st.dataframe(st.session_state['nominations_df'])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
    if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"):
        if 'friendly_reflections_df' not in st.session_state:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π..."):
                refl_df = asyncio.run(generate_friendly_reflections(filtered_df, client))
                st.session_state['friendly_reflections_df'] = refl_df
        st.subheader("üåü –î—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        st.dataframe(st.session_state['friendly_reflections_df'])

    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ main –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

if __name__ == "__main__":
    main()
